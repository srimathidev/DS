//recursion and backtrack
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        comb(0,target,new ArrayList<Integer>(),candidates,result);
        return result;
    }
    
    public void comb(int start, int target, ArrayList<Integer> curr, int[] nums, List<List<Integer>> result){
    //base case
    if(target == 0){
        result.add(new ArrayList<Integer>(curr));
    }

    if(target < 0){
        return;
    }

    for(int i= start; i<nums.length;i++){
            curr.add(nums[i]);
            comb(i,target - nums[i], curr, nums, result);
            curr.remove(curr.size()-1);
            
    }
}
}
