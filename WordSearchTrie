class Solution {
    
    public class TrieNode{
        
        boolean isWord;
        TrieNode[] child;
        
        public TrieNode() {
            
            isWord = false;
            child = new TrieNode[26];

        }
        
    }
    
    TrieNode root = new TrieNode();
    
    //visited flag
    boolean[][] visited;
    
    
    public List<String> findWords(char[][] board, String[] words) {
        
        Set<String> result = new HashSet<>();
        
        visited = new boolean[board.length][board[0].length];
        
        addTrie(words);
        
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(root.child[board[i][j] - 'a'] != null){
                    search(board, i, j, root, "", result);
                }
            }
        }
        return new LinkedList<>(result);
        
    }
    
    public void addTrie(String[] word){
        for(String str: word){
            TrieNode node = root;
            for(int i=0;i<str.length();i++){
                char c = str.charAt(i);
                if(node.child[c - 'a'] == null){
                    node.child[c-'a'] = new TrieNode();
                }
                node = node.child[c - 'a'];
            }
            node.isWord = true;
        }
        
    }
    
    //recursive function
    public void search(char[][] board, int row, int col, TrieNode node, String word, Set<String> result){
        //base case
        if(row >= board.length || row < 0 || col >= board[row].length || col < 0 || visited[row][col] ){
            return;
        }
        
        if(node.child[board[row][col] - 'a'] == null) {
            return; 
        }
        
        visited[row][col] = true;
        
        node = node.child[board[row][col] - 'a'];
        
        //boundary check
        if(node.isWord){
            result.add(word + board[row][col]);
        }
        
        search(board, row-1, col, node, word + board[row][col], result);
        search(board, row+1, col, node, word + board[row][col], result);
        search(board, row, col-1, node, word + board[row][col], result);
        search(board, row, col+1, node, word + board[row][col], result);
        
        visited[row][col] = false;
    }
    
    
}
