//using recursion and backtracking to find palindrome of each substring in the given string
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<List<String>>();
        helper(0,res,new ArrayList<String>(), s);
        return res;
    }
    public List<List<String>> helper(int start, List<List<String>> res, ArrayList<String> curr, String s){
        if(start >= s.length()) res.add(new ArrayList<String>(curr));
        for(int e = start; e<s.length();e++){
            if(isPalindrome(s,start,e))
            {
                curr.add(s.substring(start,e+1));
                helper(e+1,res,curr,s);
                //backtrack
                curr.remove(curr.size()-1);
            }
        }
        return res;
    }
    
    public boolean isPalindrome(String s, int start, int end){
        while(start < end){
            if(s.charAt(start++) != s.charAt(end--)) return false;
        }
        return true;
    }
}
