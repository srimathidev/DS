class Solution {
    public int shortestPath(int[][] grid, int k) {
        int[][] dir = {{0,1}, {0,-1}, {1,0},{-1,0}};
        int row = grid.length;
        int col = grid[0].length;
        
        boolean[][][] dp = new boolean[row][col][k+1];
        int steps = 0;
        
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[]{0,0,k});
        
        
        while(!q.isEmpty()){
            int size = q.size();
            
            while(size-- > 0){
                int curr[] = q.poll();
                
                if(curr[0] == row-1 && curr[1] == col-1) return steps;
                
                for(int[] d: dir){
                    int i = curr[0] + d[0];
                    int j = curr[1] + d[1];
                    int obs = curr[2];
                    
                    if(i >= 0 && i < row && j >=0 && j < col){
                    
                    if(grid[i][j] == 0 && !dp[i][j][obs]){
                        q.offer(new int[]{i,j,obs});
                        dp[i][j][obs] = true;
                    }
                    else if(grid[i][j] == 1 && obs > 0 && !dp[i][j][obs-1]){
                        q.offer(new int[]{i,j,obs-1});
                        dp[i][j][obs-1] = true;
                    }
                  }
                }
                
            }
            ++steps;
        }
        
        return -1;
    }
}
