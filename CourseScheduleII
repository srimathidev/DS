class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<Integer>[] adj = new LinkedList[numCourses];
        int[] visited = new int[numCourses];
        
        //creating adjacent list
        for(int i=0;i<numCourses;i++){
            adj[i] = new LinkedList<Integer>();
        }
        
        for(int i=0;i<prerequisites.length;i++){
            adj[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        
        List<Integer> result = new LinkedList<>();
        for(int i=0;i<numCourses;i++){
            if(visited[i] == 0 && dfs(i, adj, visited, result)){
                return new int[0];
            }  
            
        }
        Collections.reverse(result);
        int[] res = result.stream().mapToInt(Integer::intValue).toArray();
        return res;
    }
    
    public boolean dfs(int i, List<Integer>[] adj, int[] visited, List<Integer> result){
        visited[i] = 1;
        
        for(int a: adj[i]){
            if(visited[a] == 1) return true;
            if(visited[a] == 0 && dfs(a, adj, visited, result)) return true;
            
        }
        visited[i] = 2;
        result.add(i);
        return false;
    }
    
}
