//PriorityQueue Solution
class Solution {
    public int minMeetingRooms(int[][] intervals) {
        
        PriorityQueue<Integer> heap = new PriorityQueue<>(
        intervals.length, new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                return a-b;
            }
        }); //min heap
        
        Arrays.sort(intervals, new Comparator<int[]>() {
            public int compare(int[] a, int[] b){
                return a[0] - b[0];
            }
        }); // sorting start time
        
        
        heap.add(intervals[0][1]);
        
        for(int i=1; i<intervals.length;i++){
            if(intervals[i][0] >= heap.peek()){
                heap.poll();
            }
            
            heap.add(intervals[i][1]);
        }
        return heap.size();
    }
}

//Basic
class Solution {
    public int minMeetingRooms(int[][] intervals) {
        int[] start = new int[intervals.length];
        int[] end = new int[intervals.length];
        
        
        for(int i=0;i<intervals.length;i++){
            start[i] = intervals[i][0];
            end[i] = intervals[i][1];
        }
        
        Arrays.sort(start);
        Arrays.sort(end);
        
        
        int s=0, e=0;
        
        int count=0;
        
        while(s < intervals.length){
            if(start[s] >= end[e]){
                count-=1;
                e+=1;
            }
            count+=1;
            s+=1;
        }
        return count;
    }
}
