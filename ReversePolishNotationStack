class Solution {
    public int evalRPN(String[] tokens) {
        int res = 0;
        Stack<Integer> stack = new Stack<Integer>();
        for(String c: tokens) {
            
         if(c.equals("+")){
             stack.push(stack.pop() + stack.pop());
         }
        else if(c.equals("*")){
         stack.push(stack.pop() * stack.pop());
         }
        else if(c.equals("-")){
             int a = stack.pop(); 
             int b = stack.pop();
             stack.push(b-a);
         }
        else if(c.equals("/")){
             int a = stack.pop(); 
             int b = stack.pop();
             stack.push(b/a);
         }
        else{
            stack.push(Integer.parseInt(c));
        }
    }
    return stack.pop();
}
}

//another solution
class Solution {
    public int evalRPN(String[] tokens) {
        Stack<Integer> stack = new Stack<Integer>();
        
        for(String token: tokens){
            if(!"+-*/".contains(token)){
                stack.push(Integer.valueOf(token));
                continue;
            }
            
            int num2 = stack.pop();
            int num1 = stack.pop();
            int res = 0;
            
            switch(token){
                case "+":
                    res = num1 + num2;
                    break;
                case "-":
                    res = num1 - num2;
                    break;
                case "*":
                    res = num1 * num2;
                    break;
                case "/":
                    res = num1 / num2;
                    break;
            }
            
            stack.push(res);
            
        }
        return stack.pop();
    }
}
