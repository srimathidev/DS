//dynamic programming
class Solution {
    public String longestPalindrome(String s) {
       
        int len = s.length();
        String largest = "";
        //dp
        boolean[][] dp = new boolean[len][len];
        
        for(int i=0; i<len; i++){
            for(int j=0, k=i; k<len;k++, j++){
                if(i == 0){
                   dp[j][k] = true; 
                    if(s.substring(j,k+1).length() > largest.length()){
                        largest = s.substring(j,k+1);
                    }
                }
                else if(i == 1){
                    if(s.charAt(j) == s.charAt(k)){
                        dp[j][k] = true; 
                        if(s.substring(j,k+1).length() > largest.length()){
                        largest = s.substring(j,k+1);
                    }
                                         
                }
                     else{
                        dp[j][k] = false; 
                    } 
                }
                else{
                   if(s.charAt(j) == s.charAt(k) && dp[j+1][k-1] == true){
                       dp[j][k] = true; 
                        if(s.substring(j,k+1).length() > largest.length()){
                        largest = s.substring(j,k+1);
                   }
                           
                }
                else{
                        dp[j][k] = false; 
                    }   
            }
        }
    }
        return largest;
  }
}
