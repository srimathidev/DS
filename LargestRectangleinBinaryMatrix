class Solution {
    public int maximalRectangle(char[][] matrix) {
        
        if(matrix.length==0) return 0;
        
        int maxArea = 0;
        int[] dp = new int[matrix[0].length];
        
        for(int i=0;i<matrix.length;i++){
            for(int j=0; j<matrix[i].length;j++){
                dp[j] = matrix[i][j] == '1' ? dp[j] + 1 : 0;
            }
            maxArea = Math.max(maxArea, maxArea(dp));
        }
        return maxArea;
    }
    
    
    public int maxArea(int[] heights){
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);
        int maxArea = 0;
        int length = heights.length;
        
        for(int i=0;i<length;i++){
            while(stack.peek() != -1 && heights[stack.peek()] >= heights[i]){
                int height = heights[stack.pop()];
                int width = i - stack.peek() - 1;
                maxArea = Math.max(maxArea, height * width);
            }
            stack.push(i);
        }
        while(stack.peek() != -1){
                int height = heights[stack.pop()];
                int width = length - stack.peek() - 1;
                maxArea = Math.max(maxArea, height * width);
            }
        return maxArea;
    }
}
