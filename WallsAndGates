// -1 means wall/obstacle
// 0 means gate
// infinity means empty room


class Solution {
    
    int[][] dirs = {{1,0}, {0,1}, {-1,0}, {0,-1}};
    int EMPTY = Integer.MAX_VALUE;
    
    public void wallsAndGates(int[][] rooms) {
        if(rooms == null || rooms.length == 0 || rooms[0].length==0) return;
        
        int row = rooms.length;
        int col = rooms[0].length;
        
        Queue<int[]> queue = new LinkedList<>();
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(rooms[i][j] == 0){
                    queue.add(new int[]{i,j});
                }
            }
        }
        
        while(!queue.isEmpty()){
            int[] curr = queue.poll();
            
            for(int[] dir: dirs){
                int x = curr[0] + dir[0];
                int y = curr[1] + dir[1];
                
                if(x<0 || x>=row || y<0 || y>=col)
                    continue;
                
                if(rooms[x][y] == EMPTY){
                    rooms[x][y] = rooms[curr[0]][curr[1]] + 1;
                    queue.add(new int[]{x,y});
                }
            }
        }
    }
}
