class Solution {
    public void solve(char[][] board) {
        
        //base case
        if(board == null || board.length==0 || board[0].length==0) return;
        
        
        int rows = board.length;
        int cols = board[0].length;
        
        for(int i=0;i<rows;i++){
           if(board[i][0] == 'O') {
               callDFS(board, i, 0);
           }
            if(board[i][cols-1] == 'O'){
                callDFS(board, i,cols-1);
            }
        }
        
        for(int j=0;j<cols;j++){
            if(board[0][j] == 'O'){
                callDFS(board,0,j);
            }
            if(board[rows-1][j] == 'O'){
                callDFS(board,rows-1,j);
            }
        }
        
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
                else if(board[i][j] == '*'){
                    board[i][j] = 'O';
                }
            }
        }
        
    }
    
    public void callDFS(char[][] board, int i, int j){
        // boundary checks
        if(i < 0 || i > board.length || j<0 || j>board[0].length) return;
        
        if(board[i][j] == 'O') {
            board[i][j] = '*';
        }
        
        if(i > 0 && board[i-1][j] == 'O'){
            callDFS(board, i-1, j);
        }
        
        if(i < board.length-1 && board[i+1][j] == 'O'){
            callDFS(board, i+1, j);
        }
        
        if(j > 0 && board[i][j-1] == 'O'){
            callDFS(board,i,j-1);
        }
        
        if(j < board[0].length-1 && board[i][j+1] == 'O'){
            callDFS(board,i,j+1);
        }
        
        
    }
}
