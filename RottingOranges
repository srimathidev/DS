class Solution {
    int minute = 0;
    public int orangesRotting(int[][] grid) {
        
        if(grid == null || grid.length == 0 || grid[0].length==0) return 0;
        
        int rows = grid.length;
        int cols = grid[0].length;
        
        Queue<int[]> queue = new LinkedList<>(); 
        int fresh = 0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j] == 2){
                   queue.add(new int[]{i,j});
                }
                else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        
        while(!queue.isEmpty()){
            int num = queue.size();
            for(int i=0;i<num;i++){
                int x = queue.peek()[0];
                int y = queue.peek()[1];
                queue.remove();
                if(x>0 && grid[x-1][y] == 1){
                    grid[x-1][y] = 2;
                    fresh--;
                    queue.add(new int[]{x-1,y});
                }
                 if(x<rows-1 && grid[x+1][y] == 1){
                    grid[x+1][y] = 2;
                    fresh--;
                    queue.add(new int[]{x+1,y});
                }
                if(y>0 && grid[x][y-1] == 1){
                    grid[x][y-1] = 2;
                    fresh--;
                    queue.add(new int[]{x,y-1});
                }
                 if(y<cols-1 && grid[x][y+1] == 1){
                    grid[x][y+1] = 2;
                    fresh--;
                    queue.add(new int[]{x,y+1});
                }
                
            }
            if(!queue.isEmpty())
                minute++;
        }
        
        return fresh == 0 ? minute : -1;
    }
    
    
}
