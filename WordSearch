//recursion and visited

class Solution {
    boolean[][] visited;
    public boolean exist(char[][] board, String word) {
        int rows = board.length;
        int columns = board[0].length;
        visited = new boolean[rows][columns];
        for(int i=0;i<rows;i++){
            for(int j=0;j<columns;j++){
                if(word.charAt(0) == board[i][j] && search(i,j,0,board, word)){
                    return true;
              }
            }
        }
        return false;
    }
    
    public boolean search(int i, int j, int start, char[][] board, String word){
        //base case
        if(start == word.length())
        {
            return true;
        }
        //boundary checks
        if(i<0 || i>=board.length || j<0 || j>=board[i].length || word.charAt(start) != board[i][j] || visited[i][j]){
            return false;
        }
        //recursive code 
        visited[i][j] = true;
        if(search(i+1,j,start+1,board,word) ||
            search(i-1, j, start+1,board,word) ||
            search(i,j+1,start+1,board,word) ||
            search(i,j-1,start+1,board,word)){
            return true;
        }
        visited[i][j] = false;
        return false;
    }
}
